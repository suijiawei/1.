一：：：字符串方法不是自己添加的方法，而是字符串自带的方法
1.找指定的字符：charAt()、charCodeAt()
2.截取字符串：substring()、slice() 、substr()
截取操作是不包含结束位置的字符，当只写一个参数的时候，表示从起始位置一直截取到最后
区别：
            //1. substring支持起始位置和结束位置不用非要按顺序写，但是slice是不行的
            //2. slice支持负数，-1表示最后一个字符，但是substring是不行的
 第一个参数：起始位置，而第二参数：截取的长度
        console.log( a.substr(1, 3) );   // 'ell'
3.找指定字符的位置：indexOf()、lastIndexOf()
 当有多个满足条件的字符，取第一个字符的位置
找不到的字符，返回 -1
console.log( a.indexOf('ell') );可以查找一部分字符串，返回字符串第一个字符的位置
console.log( a.indexOf('l',5) );   // 9  从5的位置开始去查找l字符 
console.log( a.lastIndexOf('l') );   // 9  从右向左查找 */
4.字符串转大小写： toUpperCase()、 toLowerCase()


二：：：数组：数组是相同数据类型的元素按一定顺序排列的集合。
类型是对象
        如何定义一个数组
        var obj = {};   // 对象字面量
        var arr = [];   // 数组
        //数组和循环也是经常配合使用的
  快速清空一个数组
        //arr.length = 0;
数组方法：
1.添加起始位置与结束位置的子项：unshift()、 push()
    arr.push('d');  // 把d添加到arr数组的最后位置
2.删除起始位置与结束位置的子项： shift()、pop()    
arr.pop();  // 只能删除最后一个子项
    //arr.shift();  // 只能删除起始一个子项

    // 重要的概念！：数组的方法是分为两大类的：
    //     1. 变异方法：shift unshift pop push reverse sort splice 
    //     2. 非变异方法：indexOf concat map filter ... 
      变异方法的特点会改变原数组，而非变异方法是不会改变原数组的
3.截取数组：slice()
 eg.   var arr = ['a','b','c','d','e'];
        console.log( arr.slice(1,3) );   //  ['b','c']
        console.log( arr.slice(1) );   //  ["b", "c", "d", "e"]
4.合并数组成字符串：join()
5.分割字符串成数组：split() 跟 join() 相反的操作方法
6.        //合并多个数组为一个数组：concat()
7.查找数组子项的位置：indexOf()、lastIndexOf()
8.查看数组子项是否存在：includes()
9.splice() : 变异方法 ,  对数组的任意位置进行添加元素、删除元素、替换元素
第一个参数：起始位置，第二个参数：从起始位置开始删除元素的个数
    var result = arr.splice(1,2);  // 返回被删除元素的数组
第一个参数：起始位置，第二个参数：从起始位置开始删除元素的个数
    从第三个参数开始：就是往起始位置的前面添加元素
 eg .  // splice常见操作方式：删除数组中的某一项
    var arr = ['a','b','c','d'];
    arr.splice(3,1);   // 删除d
10.reverse() : 反序，变异方法  默认是从小到大进行排序的
11. sort() : 排序，异步方法    /默认行为：按位进行一位一位的排序
  如 何 按 照 自 定 义 行 为 进 行 排 序 呢 ？ s o r t ( ) 方 法 中 提 供 了 一 个 函 数 
 
      /* var arr = [3,6,24,17,23];
    arr.sort(function(n1,n2){
        //console.log(n1, n2);   // 数组中的任意两项
        //默认：n1在n2的前面
        //规则：return 一个负数，这两个比较的数位置不变n1在n2的前面
        //规则：return 一个正数，这两个比较的数位置切换n1在n2的后面
        //规则：return 0，表示这两个数是同一个值
       
        //return n1 - n2;  // 小数越来越靠前，大数越来越靠后
        return n2 - n1;   //  大数越来越靠前，小数越来越靠后
12.map() : 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
            //根据原数组，映射出一个新的数组
var ret = arr.map(function(v, i, a){  
            //回调函数会多次触发，根据数组的长度决定次数

            //console.log(v);  // 第一个参数：就是数组的每一项
            //console.log(i);   // 第二个参数：数组的下标
            //console.log(a);   // 第三个参数：就是数组本身
            
            // return每一次的值，决定了新数组的每一项的值
            return 123;
13.find()：返回通过测试（函数内判断）的数组的第一个元素的值

        /* var arr = [23,4,6,12,70];
        var ret = arr.find(function(v,i,a){
            //return // 只看第一个满足条件的，返回true的结果，并得到这个值
            return v < 18;
        });
        console.log( ret );   // 4 */
14.every()：检测数值元素的每个元素是否都符合条件。
some()： 检测数组元素中是否有元素符合指定条件。
  // 让最终结果返回布尔值
      //every() -> &&
      //some() -> ||





































