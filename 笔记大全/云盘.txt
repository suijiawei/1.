链接: https://pan.baidu.com/s/1H9AvsdYAua8sTEO1HV7Gww 提取码: yqds 
192.168.70.242
1.                    回调函数   就是把一个函数作为另一个函数的实参
事件委托    就是当前操作的事件
静态方法
正则模板字符串    ${}  
 正则表达式：一种操作字符串的规则，能实现一些字符串的复杂需求。

2.          在对象下操作的属性：叫做实例属性 
3.            在对象下操作的方法：叫做实例方法
4              .在类(构造函数)下操作的属性：叫做静态静态属性
5.                   在类下操作的方法：叫做静态方法。
6.            在面向对象里面
构造函数 ，利用它来创建对象，跟普通函数很像，但是有两点区别:
            1. 构造函数的函数名首字母大写
            2. 构造函数的调用，需要在前面添加一个关键字 new
7.                     字符串
8.                     数组
9.                   data-* 的方式都是表示自定义属性   getAttribute()

10.                $_REQUEST[];   // 只接收"名称/值"对的格式
11.field_count：字段个数
12.num_rows：集合的个数
13.map() : 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
            //根据原数组，映射出一个新的数组
 14.合并数组成字符串：join()
15.w.h  动态图片 可变大小

16.promise  链式调用：
let p = new Promise((resolve, reject)=>{
            setTimeout(()=>{
                resolve(123);
            },1000);
        });

        let p2 = new Promise((resolve, reject)=>{
            setTimeout(()=>{
                resolve(789);
            },1000);
        });
        p
        .then((n)=>{
            console.log(n);
            return p2;  // 一旦return的是promise对象，那么内部就不会创建新的promise，而是采用return的这个promise调用下一个then
        })
        .then((n)=>{
            console.log(n);  // 789
        })
        .then(()=>{    // 内部创建的新的promsie
            console.log(3);
        });

17.JSON是一种前后端通信的数据格式。是专门处理集合数据的。

        //JSON跟普通对象的区别：
            //1. key属性要用双引号引起来，字符串类型的值也要用双引号
            //2. 值有限制，只能是：字符串、数字、布尔值、null、[]、{}
            //3. 最后一组值，是不能用甩尾逗号的
        /* var json = {
            "username" : "xiaoming",
            "age" : 20, 
            "gender" : "男"
        };
例子：ul.innerHTML=json.images.map(function(v){
    return `<li>${v.title}</li>`
}).join('');

18. ajax : 不是新技术，就是JS中的一个功能。ajax : 作用跟表单类似，进行前后端通信。
跟表单的区别：                                                                        ajax的特点：
            1. ajax是局部刷新的，不刷新整个页面                                                 1. 局部刷新
            2. ajax是异步的，不影响后续代码的执行                                              2. 异步操作
  //  1. xhr对象
        let xhr = new XMLHttpRequest();
        //  2. 监听
        xhr.onload = function(){
            xhr.responseText 
        };
        // 3. 连接和发送
        xhr.open();
        xhr.send();
19.jQuery : 是一个库。库就是别人做好的现成的文件，可以直接拿过来使用。
20.disabled 禁用
21.数组
（1）splice() : 变异方法 ,  对数组的任意位置进行添加元素、删除元素、替换元素
第一个参数：起始位置，第二个参数：从起始位置开始删除元素的个数
从第三个参数开始：就是往起始位置的前面添加元素
splice常见操作方式：删除数组中的某一项  arr.splice(3,1);  
（2）sort() : 排序，异步方法  默认是从小到大进行排序的
 var arr = [3,6,24,17,23];
    arr.sort(function(n1,n2){
        //console.log(n1, n2);   // 数组中的任意两项
        //默认：n1在n2的前面
        //规则：return 一个负数，这两个比较的数位置不变n1在n2的前面
        //规则：return 一个正数，这两个比较的数位置切换n1在n2的后面
        //规则：return 0，表示这两个数是同一个值
       
        //return n1 - n2;  // 小数越来越靠前，大数越来越靠后
        return n2 - n1;   //  大数越来越靠前，小数越来越靠后
    （3）map() : 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
            //根据原数组，映射出一个新的数组	
（4）filter() : 检测数值元素，并返回符合条件所有元素的数组。
（5）find()：返回通过测试（函数内判断）的数组的第一个元素的值
（6）forEach()：数组每个元素都执行一次回调函数。
                // 类似于循环的操作，跟循环的区别：
                    //for() while() : 元素集合、arguments、数组 .... 
                    //forEach() : 只能针对数组操作
    （7）every()：检测数值元素的每个元素是否都符合条件。
            //some()： 检测数组元素中是否有元素符合指定条件。
every() -> &&
some() -> ||












































